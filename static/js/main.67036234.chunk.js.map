{"version":3,"sources":["constants/index.ts","components/TodoItem.tsx","components/TodoList.tsx","components/TodoSort.tsx","App.tsx","helpers/api.ts","index.tsx"],"names":["URL_API","TodoItem","todo","id","title","completed","user","className","key","name","TodoList","todos","map","TodoSort","sortListByTitle","sortListByStatus","sortListByName","type","onClick","App","useState","setTodos","isLoaded","setIsLoaded","sort","a","b","localeCompare","todosPromise","fetch","then","response","json","usersPromise","Promise","all","todosFromServer","usersFromServer","preparedTodosList","find","userId","ReactDOM","render","document","getElementById"],"mappings":"sOAAaA,G,MAAU,wCCsCRC,EAhCmB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEjCC,EAIED,EAJFC,GACAC,EAGEF,EAHFE,MACAC,EAEEH,EAFFG,UACAC,EACEJ,EADFI,KAGF,OACE,wBACEC,UAAU,aACVC,IAAKL,GAEL,yBAAKI,UAAU,eAAf,SAEG,IACCH,GAEJ,yBAAKG,UAAU,eAAf,UAEG,IACAF,EAAY,YAAc,eAE7B,yBAAKE,UAAU,eAAf,QAEG,IACAD,EAAOA,EAAKG,KAAO,MCTbC,EAhBmB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACnC,OACE,oCACE,wBAAIJ,UAAU,cACXI,EAAMC,KAAI,SAACV,GAAD,OACT,kBAAC,EAAD,CACEM,IAAKN,EAAKC,GACVD,KAAMA,UCoBHW,EA1BmB,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,gBAAiBC,EAAuC,EAAvCA,iBAAkBC,EAAqB,EAArBA,eACtE,OACE,yBAAKT,UAAU,cAAf,WAEE,4BACEU,KAAK,SACLC,QAASJ,GAFX,SAMA,4BACEG,KAAK,SACLC,QAASH,GAFX,UAMA,4BACEE,KAAK,SACLC,QAASF,GAFX,UCkDSG,EApEH,WAAO,IAAD,EACUC,mBAAkB,IAD5B,mBACTT,EADS,KACFU,EADE,OAEgBD,oBAAkB,GAFlC,mBAETE,EAFS,KAECC,EAFD,KA2ChB,OACE,yBAAKhB,UAAU,QACZe,GACC,oCACE,kBAAC,EAAD,CACER,gBA1Bc,WACtBO,EAAS,YAAIV,GACVa,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAErB,MAAMuB,cAAcD,EAAEtB,YAyBlCW,iBAtBe,WACvBM,EAAS,YAAIV,GACVa,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAErB,WAAaoB,EAAEpB,eAqB5BW,eAlBa,WACrBK,EAAS,YAAIV,GACVa,MAAK,SAACC,EAAGC,GAKR,OAJgBD,EAAEnB,MAAQoB,EAAEpB,KACxBmB,EAAEnB,KAAKG,KAAKkB,cAAcD,EAAEpB,KAAKG,OAChC,SAeH,kBAAC,EAAD,CAAUE,MAAOA,MAGnBW,GACA,4BACEL,KAAK,SACLC,QAtDa,WACnB,IAAMU,ECRDC,MAAM,GAAD,OAAI7B,EAAJ,WACT8B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDQrBC,ECJDJ,MAAM,GAAD,OAAI7B,EAAJ,WACT8B,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UDK3BE,QAAQC,IAAI,CAACP,EAAcK,IACxBH,MAAK,YAAyC,IAAD,mBAAtCM,EAAsC,KAArBC,EAAqB,KACtCC,EAAoBF,EAAgBxB,KAAI,SAAAV,GAC5C,OAAO,2BACFA,GADL,IAEEI,KAAM+B,EAAgBE,MAAK,SAAAjC,GAAI,OAAIA,EAAKH,KAAOD,EAAKsC,eAIxDjB,GAAY,GACZF,EAASiB,QAsCT,oBE1DRG,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.67036234.chunk.js","sourcesContent":["export const URL_API = 'https://jsonplaceholder.typicode.com';\n","import React from 'react';\n\ntype Props = {\n  todo: Todos;\n};\n\nconst TodoItem: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <li\n      className=\"todo__item\"\n      key={id}\n    >\n      <div className=\"todo__title\">\n        Title:\n        {' '}\n        { title}\n      </div>\n      <div className=\"todo__title\">\n        Status:\n        {' '}\n        {completed ? 'completed' : 'in progress'}\n      </div>\n      <div className=\"todo__title\">\n        Name:\n        {' '}\n        {user ? user.name : ''}\n      </div>\n    </li>\n  );\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from './TodoItem';\n\ntype Props = {\n  todos: Todos[];\n};\n\nconst TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      <ul className=\"todo__list\">\n        {todos.map((todo) => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n          />\n        ))}\n      </ul>\n    </>\n\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\n\ntype Props = {\n  sortListByTitle: () => void;\n  sortListByStatus: () => void;\n  sortListByName: () => void;\n};\n\nconst TodoSort: React.FC<Props> = ({ sortListByTitle, sortListByStatus, sortListByName }) => {\n  return (\n    <div className=\"todo__sort\">\n      Sort by:\n      <button\n        type=\"button\"\n        onClick={sortListByTitle}\n      >\n        title\n      </button>\n      <button\n        type=\"button\"\n        onClick={sortListByStatus}\n      >\n        status\n      </button>\n      <button\n        type=\"button\"\n        onClick={sortListByName}\n      >\n        name\n      </button>\n    </div>\n  );\n};\n\nexport default TodoSort;\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getTodos, getUsers } from './helpers/api';\nimport TodoList from './components/TodoList';\nimport TodoSort from './components/TodoSort';\n\nconst App = () => {\n  const [todos, setTodos] = useState<Todos[]>([]);\n  const [isLoaded, setIsLoaded] = useState<boolean>(false);\n\n  const loadAllTodos = () => {\n    const todosPromise = getTodos();\n    const usersPromise = getUsers();\n\n    Promise.all([todosPromise, usersPromise])\n      .then(([todosFromServer, usersFromServer]) => {\n        const preparedTodosList = todosFromServer.map(todo => {\n          return {\n            ...todo,\n            user: usersFromServer.find(user => user.id === todo.userId),\n          };\n        });\n\n        setIsLoaded(true);\n        setTodos(preparedTodosList);\n      });\n  };\n\n  const sortListByTitle = () => {\n    setTodos([...todos]\n      .sort((a, b) => a.title.localeCompare(b.title)));\n  };\n\n  const sortListByStatus = () => {\n    setTodos([...todos]\n      .sort((a, b) => +b.completed - +a.completed));\n  };\n\n  const sortListByName = () => {\n    setTodos([...todos]\n      .sort((a, b) => {\n        const result = (a.user && b.user)\n          ? a.user.name.localeCompare(b.user.name)\n          : -1;\n\n        return result;\n      }));\n  };\n\n  return (\n    <div className=\"todo\">\n      {isLoaded && (\n        <>\n          <TodoSort\n            sortListByTitle={sortListByTitle}\n            sortListByStatus={sortListByStatus}\n            sortListByName={sortListByName}\n          />\n          <TodoList todos={todos} />\n        </>\n      )}\n      {!isLoaded && (\n        <button\n          type=\"button\"\n          onClick={loadAllTodos}\n        >\n          Load all todos\n        </button>\n      )}\n    </div>\n  );\n};\n\n\nexport default App;\n","import { URL_API } from '../constants';\n\nexport const getTodos = (): Promise<Todos[]> => {\n  return fetch(`${URL_API}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (): Promise<Users[]> => {\n  return fetch(`${URL_API}/users`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}